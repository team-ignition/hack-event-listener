import { abi } from '../services/contractsParser'

export default class TokenRankedListContract {
  tokenRankedListContract: any;
  contractName: string;
  tokenRankedListAddress: string;
  web3: any;


  constructor(web3: any, tokenRankedListAddress: string) {
    this.contractName = 'TRL';
    this.tokenRankedListContract = new web3.eth.Contract(
      abi(this.contractName),
      tokenRankedListAddress
    );
    this.tokenRankedListAddress = tokenRankedListAddress;
    this.web3 = web3;
    this.buyTokenVotes = this.buyTokenVotes;
    this.claimBounty = this.claimBounty;
    this.vote = this.vote;
    this.votesReceived = this.votesReceived;
    this.votesBalance = this.votesBalance;
    this.periodIndex = this.periodIndex;
    this.stageIndex = this.stageIndex;
    this.periods = this.periods;
  }

  /*
   * Write the blockchain
   */
  buyTokenVotes(amount: number, voterAddress: string, gas?: number, gasPrice?: number) {
    return new Promise((resolve, reject) => {
      if (gas && gasPrice !== undefined) {
        this.tokenRankedListContract.methods.buyTokenVotes(amount)
        .send({ from: voterAddress, gas, gasPrice }).then((result: any) => resolve(result));
      } else {
        this.tokenRankedListContract.methods.buyTokenVotes(amount)
        .send({ from: voterAddress }).then((result: any) => resolve(result));
      }
    });
  }
  vote(candidateAddress: string, amount: number, voterAddress: string, gas?: number, gasPrice?: number) {
    return new Promise((resolve, reject) => {
      if (gas && gasPrice !== undefined) {
        this.tokenRankedListContract.methods.vote(candidateAddress, amount)
        .send({ from: voterAddress, gas, gasPrice }).then((result: any) => resolve(result));
      } else {
        this.tokenRankedListContract.methods.vote(candidateAddress, amount)
        .send({ from: voterAddress }).then((result: any) => resolve(result));
      }
    });
  }
  initPeriod(periodTTL: number, adminAddress: string) {
    return new Promise((resolve, reject) => {
      this.tokenRankedListContract.methods
        .initPeriod()
        .send({ from: adminAddress })
        .then((result: any) => resolve(result));
    });
  }
  initClaimingState(initerAddress: string) {
    return new Promise((resolve, reject) => {
      this.tokenRankedListContract.methods
        .initClaimingState()
        .send({ from: initerAddress })
        .then((result: any) => resolve(result));
    });
  }
  claimBounty(candidateAddress: string) {
    return new Promise((resolve, reject) => {
      this.tokenRankedListContract.methods
        .claimBounty()
        .send({ from: candidateAddress })
        .then((result: any) => resolve(result));
    });
  }

  /*
   * Read the blockchain
   */
  votesReceived(period: number, candidateAddress: string) {
    return new Promise((resolve, reject) => {
      this.web3.eth
        .call({
          to: this.tokenRankedListAddress,
          data: this.tokenRankedListContract.methods
            .votesReceived(period, candidateAddress)
            .encodeABI()
        })
        .then((votesReceived: any) =>
          resolve(this.web3.utils.hexToNumber(votesReceived))
        );
    });
  }
  votesBalance(period: number, candidateAddress: string) {
    return new Promise((resolve, reject) => {
      this.web3.eth
        .call({
          to: this.tokenRankedListAddress,
          data: this.tokenRankedListContract.methods
            .votesBalance(period, candidateAddress)
            .encodeABI()
        })
        .then((votesBalance: any) =>
          resolve(this.web3.utils.hexToNumber(votesBalance))
        );
    });
  }
  periodIndex() {
    return new Promise((resolve, reject) => {
      this.web3.eth
        .call({
          to: this.tokenRankedListAddress,
          data: this.tokenRankedListContract.methods.currentPeriod().encodeABI()
        })
        .then((periodIndex: any) =>
          resolve(this.web3.utils.hexToNumber(periodIndex))
        );
    });
  }
  stageIndex() {
    return new Promise((resolve, reject) => {
      this.web3.eth
        .call({
          to: this.tokenRankedListAddress,
          data: this.tokenRankedListContract.methods.currentStage().encodeABI()
        })
        .then((periodIndex: any) =>
          resolve(this.web3.utils.hexToNumber(periodIndex))
        );
    });
  }
  periods(period: number) {
    return new Promise((resolve, reject) => {
      this.tokenRankedListContract.methods
        .periods(period)
        .call()
        .then((periods: any) => resolve(periods));
    });
  }
}
