import { abi } from '../services/contractsParser';


export default class Erc20Contract {
  erc20Contract: any;
  contractName: string;
  web3: any;
  erc20Address: string;
  tokenRankedListAddress: string;

  constructor(web3: any, erc20Address: string, tokenRankedListAddress: string) {
    this.contractName = 'Standard20TokenMock';
    this.erc20Contract = new web3.eth.Contract(
      abi(this.contractName),
      erc20Address
    );
    this.tokenRankedListAddress = tokenRankedListAddress;
    this.web3 = web3;
    this.getTokenBalance = this.getTokenBalance;
    this.getStakedTokensAmount = this.getStakedTokensAmount;
    this.approve = this.approve;
    this.transfer = this.transfer;
    this.sendEth = this.sendEth;
  }

  /*
   * WRITE ON THE BLOCKCHAIN
   */
  approve(amount: number, voterAddress: string) {
    return new Promise((resolve, reject) => {
      this.erc20Contract.methods
        .approve(this.tokenRankedListAddress, amount)
        .send({ from: voterAddress })
        .then((success: any) => resolve(success));
    });
  }
  transfer(amount: number, voterAddress: string, adminAddress: string) {
    return new Promise((resolve, reject) => {
      this.erc20Contract.methods
        .transfer(voterAddress, amount)
        .send({ from: adminAddress })
        .then((success: any) => resolve(success));
    });
  }
  sendEth(amount: number, voterAddress: string, adminAddress: string) {
    return new Promise((resolve, reject) => {
      this.web3.eth.sendTransaction(
        {
          from: adminAddress,
          to: voterAddress,
          value: this.web3.utils.toWei(amount.toString(), 'ether')
        },
        (error: any, result: any) => {
          resolve(result);
        }
      );
    });
  }

  /*
   * READ THE BLOCKCHAIN
   */
  getTokenBalance(voterAddress: string) {
    return new Promise((resolve, reject) => {
      this.erc20Contract.methods
        .balanceOf(voterAddress)
        .call()
        .then((balance: any) => {
          resolve(balance);
        });
    });
  }
  getStakedTokensAmount(voterAddress: string) {
    return new Promise((resolve, reject) => {
      this.erc20Contract.methods
        .allowance(voterAddress, this.tokenRankedListAddress)
        .call()
        .then((stakedAmount: any) => resolve(stakedAmount));
    });
  }
}
