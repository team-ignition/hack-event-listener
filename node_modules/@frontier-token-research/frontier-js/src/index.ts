import Erc20Contract from './contracts/erc20';
import TokenRankedListContract from './contracts/tokenRankedList';
import OwnedRegistryContract from './contracts/ownedRegistry';

import { address } from './services/contractsParser'

const Web3: any = require('web3');

// IDEA: in the future use mixins => https://stackoverflow.com/questions/29879267/es6-class-multiple-inheritance
export default class {
  web3: any;
  contracts: any;
  services: any;
  AuthService: any;

  constructor({
    web3Provider,
    erc20Address = address('Standard20TokenMock'),
    tokenRankedListAddress = address('TRL'),
    candidateRegistryAddress = address('CandidatesRegistry'),
    voterRegistryAddress = address('VotersRegistry')
  }: {
    web3Provider: any;
    erc20Address?: string;
    tokenRankedListAddress?: string;
    candidateRegistryAddress?: string;
    voterRegistryAddress?: string
  }) {
    this.web3 = new Web3(web3Provider);
    this.contracts = {};
    this.contracts.Erc20 = {};
    this.contracts.TokenRankedList = {};
    this.contracts.OwnedRegistry = {};
    this.contracts.OwnedRegistry.Candidate = {};
    this.contracts.OwnedRegistry.Voter = {};
    Object.assign(
      this.contracts.Erc20,
      new Erc20Contract(this.web3, erc20Address, tokenRankedListAddress)
    );
    Object.assign(
      this.contracts.TokenRankedList,
      new TokenRankedListContract(this.web3, tokenRankedListAddress)
    );
    Object.assign(
      this.contracts.OwnedRegistry.Candidate,
      new OwnedRegistryContract(this.web3, candidateRegistryAddress)
    );
    Object.assign(
      this.contracts.OwnedRegistry.Voter,
      new OwnedRegistryContract(this.web3, voterRegistryAddress)
    );
  }
}
