// Type definitions for frontier-js [~OPTIONAL VERSION NUMBER~]
// Project: FrontierJS
// Definitions by: Abdallah-Hossayn Mokhtar Bahca] <mokhtar.bacha@consensys.net>

export as namespace frontier;

export class FrontierJS {
  web3: any;
  contracts: any;
  services: any;
  AuthService: any;
  constructor(
    web3Provider: any,
    erc20Address: string,
    tokenRankedListAddress: string,
    candidateRegistryAddress: string,
    voterRegistryAddress: string,
    ethAuthUri: string
  );
}

export declare function Abi(contractName: any): any;

export class AuthService {
  web3: any;
  ethAuth: any;
  ethAuthUri: any;
  constructor(web3Provider: any, ethAuthUri: string);
  login(account: string): Promise<{}>;
}

export class Events {
  web3: any;
  constructor(web3Provider: any);
  listenToEvents(address: string, topics: any, handlerFunction: Function): any;
}

export class Erc20Contract {
  erc20Contract: any;
  contractName: string;
  web3: any;
  erc20Address: string;
  tokenRankedListAddress: string;
  constructor(web3: any, erc20Address: string, tokenRankedListAddress: string);
  getTokenBalance(voterAddress: string): Promise<{}>;
  getStakedTokensAmount(voterAddress: string): Promise<{}>;
  approve(amount: number, voterAddress: string): Promise<{}>;
  transfer(
    amount: number,
    voterAddress: string,
    adminAddress: string
  ): Promise<{}>;
  sendEth(
    amount: number,
    voterAddress: string,
    adminAddress: string
  ): Promise<{}>;
}

export class OwnedRegistryContract {
  ownedRegistryAddress: string;
  ownedRegistryContract: any;
  contractName: string;
  constructor(web3: any, ownedRegistryAddress: string);
  remove(accountToRemove: string, adminAddress: string): Promise<{}>;
  whiteList(accountToWhiteList: string, adminAddress: string): Promise<{}>;
  maxNumListings(): Promise<{}>;
  isWhiteListed(addressToTest: string): Promise<{}>;
  listingCounter(): Promise<{}>;
  whiteListHistory(filterParams?: string, filterArgument?: string): Promise<{}>;
  removeListHistory(
    filterParams?: string,
    filterArgument?: string
  ): Promise<{}>;
  getWhiteListed(): Promise<{}>;
}

export class TokenRankedListContract {
  tokenRankedListContract: any;
  contractName: string;
  tokenRankedListAddress: string;
  web3: any;
  constructor(web3: any, tokenRankedListAddress: string);
  buyTokenVotes(amount: number, voterAddress: string): Promise<{}>;
  initPeriod(periodTTL: number, adminAddress: string): Promise<{}>;
  initClaimingState(initerAddress: string): Promise<{}>;
  claimBounty(candidateAddress: string): Promise<{}>;
  closePeriod(closerAddress: string): Promise<{}>;
  vote(
    candidateAddress: string,
    amount: number,
    voterAddress: string
  ): Promise<{}>;
  votesReceived(period: number, candidateAddress: string): Promise<{}>;
  votesBalance(period: number, candidateAddress: string): Promise<{}>;
  candidateRegistry(): Promise<{}>;
  voterRegistry(): Promise<{}>;
  periodIndex(): Promise<{}>;
  periods(period: number): Promise<{}>;
  getVotesPastEvents(
    filterParams?: string,
    filterArgument?: string
  ): Promise<{}>;
}
